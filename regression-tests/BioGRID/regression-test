#!/bin/bash
PARALLEL_EXE=${PARALLEL_EXE:?"PARALLEL_EXE must be set"}
CORES=${CORES:?"CORES must be set"}
PARALLEL_CMD="$PARALLEL_EXE -s bash $CORES"  # run in parallel on jenkins

echo "CORES is $CORES" >&2
NUM_FAILS=0

die() { echo "ERROR: $@" >&2; exit 1
}

PATH="$PATH:`pwd`/scripts"
export PATH

TMPDIR=`mktemp -d /tmp/regression-test.XXXXXX`
# Both these may be changed below with optional arguments
OutputDir="$TMPDIR"
OutputFile=NONE # will be set below either by argument or in OutputDir

ErrorMargin="0.04"
#echo "WARNING: temporarily set error margin way too big while core scores are being tested"
CompareFile=""

RUN=true # use -n to turn off run and only compare

while getopts "d:b:e:o:c:n" opt; do
    case $opt in
    n)  RUN=false;;
    e)
        if [[ $OPTARG =~ "^[0.9]*.[0.9]\+$" ]]; then
            ErrorMargin=$OPTARG
        else
            echo "Argument for provided option -e is not a decimal number between 0-1" >&2
            exit 1
        fi
        ;;
    d)
        OutputDir=$OPTARG
        ;;
    o)
        OutputFile=$OPTARG
        ;;
    c)
        CompareFile=$OPTARG
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
    :)
        echo "Option -$OPTARG requires an argument" >&2
        exit 1
        ;;
    esac
done

if [ "$OutputFile" = NONE ]; then
    OutputFile="$OutputDir/regression-test.result"
fi
trap "/bin/rm -rf $OutputDir; exit" 0 1 2 3 15
mkdir -p $OutputDir || die "couldn't create OutputDir $OutputDir"

> "$OutputFile" # create empty file

if [ -z $CompareFile -a ! -f $CompareFile ]; then
    printf "Regression file specified: %s does not exists\n" "$CompareFile"
    exit 1
fi

NL='
'

# order networks smallest-to-largest by number of nodes (may be pruned to smaller list if $CI is true; see below)
nets=`echo RNorvegicus SPombe CElegans MMusculus SCerevisiae AThaliana DMelanogaster HSapiens`

if $RUN; then
    [ -x "$EXE" ] || die "can't find executable '$EXE'"
    EXECS=`echo "$WORKING_EXECS" | newlines | tr A-Z a-z | fmt -999`
    echo sana executables: "$EXECS" >&2
    echo "$nets" | newlines | awk '{printf "count.el networks/%s.el\n",$0}' | sh | sed -e 's,networks/,,' -e 's/\.el$//' |
	awk '{n[NR-1]=$1; m[NR-1]=$2; net[NR-1]=$NF}
	    END{for(i=0;i<=NR-2;i++)for(j=i+1;j<=NR-1;j++) # see regression-test.timing.7z for justification of this runtime
		printf "%ld %s %s\n",log(m[i]*m[j])+log(n[i]*n[j]),net[i],net[j]}' |
	sort -n | awk 'BEGIN{split("'"$EXECS"'",EXECS)}
	    {net1[NR-1]=$2; net2[NR-1]=$3}
	    END{run=totalRuns=NR;
		for(i=0;i<NR;i++){ whichExec=1+int(--run/totalRuns*length(EXECS));
		    printf "echo Running %s on %s-%s; ./%s -tolerance 0 -itm 300 -s3 1 -g1 %s -g2 %s -o '$OutputDir'/%s-%s > '$OutputDir'/%s-%s.progress 2>&1\n",EXECS[whichExec],net1[i],net2[i],EXECS[whichExec],net1[i],net2[i],net1[i],net2[i],net1[i],net2[i];
	    }
	}' |
	if "$CI"; then # continuous integration: run each EXEC on only the smallest pair of networks
	    awk '!seen[$3]{print; seen[$3]=1}'
	else
	    cat
	fi | revlines | tee $TMPDIR/runs.txt | eval $PARALLEL_CMD
    (( NUM_FAILS+=$? ))
fi
# now get the list of networks taht were actually run (may be smaller due to $CI)
network_pairs=`sed 's/;.*//' $TMPDIR/runs.txt | sed 's/.* on //'`

PRG=`ls $OutputDir/*.progress | wc -l`
NUM_FAILS=$(expr $NUM_FAILS + '(' $(wc -l < $TMPDIR/runs.txt) '-' $PRG ')')

Iterations=""
echo "Checking Iterations Speed" >> $OutputFile
printf "%-30s | %-20s$NL" "Networks Pair" "Iterations Speed" >> $OutputFile
echo $network_pairs | newlines |
    while read pair; do
	progress="$OutputDir/$pair.progress"
	cIt=`awk '/, ips = /{sum+=$NF;n++}END{print sum/n}' $progress`
	Iterations="$Iterations $cIt"
	printf "%-30s | %-20s$NL" "$pair" "$cIt" >> $OutputFile
    done

IterationsAvg=`echo $Iterations | tr " " "$NL" | awk '{s+=$1}END{print s/NR}'`
IterationsAvg=`printf "%f" $IterationsAvg`
printf "Iterations /s Average: %s \n" "$IterationsAvg" >> $OutputFile

PrintTestScores()
{
    Scores=""
    printf "Checking %s score$NL" $1 >> $OutputFile
    printf "%-30s | %-20s$NL" "Networks Pair" "$1 score" >> $OutputFile
    echo $network_pairs | newlines |
	while read pair; do
	    progress="$OutputDir/$pair.out"
	    Score=`awk "/^$1: /"'{print $NF; exit}' $progress`
	    Scores=$Scores" "$Score
	    printf "%-30s | %-20s$NL" "$pair" "$Score" >> $OutputFile
	done

    ScoresAvg=`echo $Scores | tr " " "$NL" | awk '{s+=$1}END{print s/NR}'`
    ScoresAvg=`printf "%f" $ScoresAvg`
    printf "$1 Score Average: %s$NL" "$ScoresAvg" >> $OutputFile
}

SCORES="ec ics s3 lccs sec"
for score in $SCORES; do
    PrintTestScores $score
done

if [ ! -z "$CompareFile" ]; then
    BaseAverages=`cat $CompareFile | grep "Average" | grep -o "[0-9]\+.[0-9]\+"`
    Names=`cat $CompareFile | grep "Average" | awk '{print $1}'`
    NewAverages=`cat $OutputFile | grep "Average" | grep -o "[0-9]\+.[0-9]\+"`
    for i in $(seq `echo $BaseAverages | wc -w`);do
        baseItem=`echo -e $BaseAverages | awk '{print $'$i'}'`
        newItem=`echo -e $NewAverages | awk '{print $'$i'}'`
        name=`echo -e $Names | awk '{print $'$i'}'`
        errorDif=`echo "($newItem - $baseItem)/$baseItem"|bc -l`
	EXTRA_MARGIN=1
	echo -n "$name: ($newItem - $baseItem)/$baseItem, changeFrac: $errorDif, margin $ErrorMargin" >&2
	case $name in
	Iterations)
	    EXTRA_MARGIN=1000 # we don't care about iteration speed any more, just print it for informational purposes
	    echo -n " (no longer tracking iteration speed)" >&2
	    ;;
	esac
	errorDif=`echo "$errorDif/$EXTRA_MARGIN"|bc -l`
        errorDif=`echo "($errorDif)" | bc -l | awk 'function ABS(x){if(x<0)x=-x; return x} {printf "%.16f\n",ABS($1)}'`
	echo " ABS(changeFrac)=$errorDif" >&2
	# don't check margin when doing continuous integration
        if $CI || awk "BEGIN{if(1*$errorDif > 1*$ErrorMargin)exit 1;else exit 0;}"; then # remember in bash 0=true
	    : # either success, or $CI in which case we don't check
	else
            touch $OutputDir/failed
	    echo "$name failed error margin: ($newItem - $baseItem)/$baseItem has error difference '$errorDif > $ErrorMargin'" >&2
	    (( ++NUM_FAILS ))
        fi
    done
fi

echo encountered a total of $NUM_FAILS failures
if [ $NUM_FAILS -gt 0 -o "$OutputDir" != /tmp/regression-test$$ ]; then
    echo "$OutputDir not erased due to failures or analysis-only" >&2
    trap "exit" 0
fi
trap "rm $OutputDir/*.naf; exit" 0; echo "not erasing $OutputDir for long-term testing"
exit $NUM_FAILS
